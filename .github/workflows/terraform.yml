---
name: Terraform Test
on:
  pull_request:
    branches:
      - '**'
    paths:
      - .github/workflows/terraform.yml
      - Terraform/**
      - .checkov.yaml
    # push:
    #   branches:
    #     - "**"
    #   paths:
    #     - ".github/workflows/terraform.yml"
    #     - "Terraform/**"
    #     - ".checkov.yaml"

jobs:
  test-module:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        module:
          - App-Forms
          - App-Trainer
          - Data
          - ec2-image-builder
          - new-relic-synthetic
          - pre-envs-global
          - pre-envs-region
          - Splunk
          - TFE
          - VPC
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.3
      - name: Install Terraform Lint
        id: install-terraform-lint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          cd Terraform/
          tflint --init -c ./.tflint.hcl
        # - name: Install Terraform Sec
        #   id: install-terraform-sec
        #   run: |
        #     wget https://github.com/aquasecurity/tfsec/releases/download/v1.19.1/tfsec-linux-amd64 -O /usr/local/bin/tfsec
        #     chmod +x /usr/local/bin/tfsec
      - name: Terraform Init
        id: terraform-init
        run: |
          cd Terraform/modules/${{ matrix.module }}
          terraform init -input=false
      - name: Terraform fmt
        id: terraform-fmt
        run: |
          cd Terraform/modules/${{ matrix.module }}
          terraform fmt -check .
        # - name: Terraform Validate
        #   id: terraform-validate
        #   run: |
        #     cd Terraform/modules/${{ matrix.module }}
        #     terraform validate -no-color .
      - name: Terraform Lint
        id: terraform-lint
        run: |
          cd Terraform/modules/${{ matrix.module }}
          tflint -c ../../.tflint.hcl .
        # - name: Terraform Sec
        #   id: terraform-sec
        #   run: |
        #     cd Terraform/modules/${{ matrix.module }}
        #     tfsec --config-file ../../tfsec.yml --concise-output .

  test-component-tfe:
    #    runs-on: ubuntu-20.04
    runs-on:
      - ct_runner
      - ct_small_runner
      - ndm-shared
      - self-hosted
    env:
      ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
      ARTIFACTORY_PASS: ${{ secrets.ARTIFACTORY_PASS }}
    strategy:
      fail-fast: false
      matrix:
        component:
          - App-Forms
          - App-Trainer
          - Data
          - ec2-image-builder
          - new-relic
          - pre-envs
          - Splunk
          - TFE
          - VPC
    steps:
      - uses: actions/checkout@v3
      - name: Setup NodeJS for Terraform
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_hostname: terraform.company.cloud
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.1.3
      - name: Install Terraform Lint
        id: install-terraform-lint
        run: |
          export TFLINT_INSTALL_PATH="$(pwd)/Terraform"
          rm -rf /tmp/tflint*
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          chmod +x "$(pwd)/Terraform/tflint"
          cd Terraform/
          ./tflint --init -c ./.tflint.hcl
        # - name: Install Terraform Sec
        #   id: install-terraform-sec
        #   run: |
        #     wget https://github.com/aquasecurity/tfsec/releases/download/v1.21.0/tfsec-linux-amd64 -O "$(pwd)/Terraform/tfsec"
        #     chmod +x "$(pwd)/Terraform/tfsec"
        #     #go install github.com/aquasecurity/tfsec/cmd/tfsec@latest
      - name: Docker login
        id: docker-login
        run: docker login -u $ARTIFACTORY_USER -p $ARTIFACTORY_PASS company-docker.jfrog.io
      - name: Terraform Init
        id: terraform-init
        run: |
          cd Terraform/components/${{ matrix.component }}
          if [[ ${{ matrix.component }} == "pre-envs" ]]; then
            export TF_WORKSPACE="npn"
          elif [[ ${{ matrix.component }} == "new-relic" ]]; then
            export TF_WORKSPACE="npn"
          elif [[ ${{ matrix.component }} == "ec2-image-builder" ]]; then
            :
          elif [[ ${{ matrix.component }} == "TFE" ]]; then
            :
          else
            export TF_WORKSPACE="dev"
          fi
          terraform init -input=false
      - name: Terraform fmt
        id: terraform-fmt
        run: |
          cd Terraform/components/${{ matrix.component }}
          terraform fmt -check .
      - name: Terraform Validate
        id: terraform-validate
        run: |
          cd Terraform/components/${{ matrix.component }}
          terraform validate -no-color .
      - name: Terraform Lint
        id: terraform-lint
        run: |
          cd Terraform/components/${{ matrix.component }}
          ../../tflint -c ../../.tflint.hcl .
      - name: Terraform Sec
        id: terraform-sec
        run: |
          #cd Terraform/components/${{ matrix.component }}
          #../../tfsec --config-file ../../tfsec.yml --concise-output --tfvars-file ./terraform.auto.tfvars .
          docker run -i --rm -v "$(pwd)/Terraform:/src" aquasec/tfsec --config-file /src/tfsec.yml --concise-output --tfvars-file /src/components/${{ matrix.component }}/terraform.auto.tfvars /src/components/${{ matrix.component }}
      - name: Run Checkov scan
        id: checkov
        run: |
          docker run --rm --user=`id -u` -v `pwd`:/app -w /app/Terraform/components/${{ matrix.component }} company-docker.jfrog.io/bridgecrew/checkov:latest -d . --config-file /app/.checkov.yaml --framework terraform --var-file ./terraform.auto.tfvars --quiet --compact -o cli
      - name: Docker Logout
        id: docker-logout
        run: docker logout company-docker.jfrog.io
